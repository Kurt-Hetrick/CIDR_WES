# ---qsub parameter settings---
# --these can be overrode at qsub invocation--

# tell sge to execute in bash
#$ -S /bin/bash

# tell sge that you are in the users current working directory
#$ -cwd

# tell sge to export the users environment variables
#$ -V

# tell sge to submit at this priority setting
#$ -p -10

# tell sge to output both stderr and stdout to the same file
#$ -j y

# export all variables, useful to find out what compute node the program was executed on

set

echo

CORE_PATH=$1
DATAMASH=$2

PROJECT=$3

TIMESTAMP=`date '+%F.%H-%M-%S'`s

# combining all the individual qc reports for the project and adding the header.

cat $CORE_PATH/$PROJECT/REPORTS/QC_REPORT_PREP/*.QC_REPORT_PREP.txt \
| awk 'BEGIN {print "PROJECT",\
"SM_TAG",\
"RG_PU",\
"LIBRARY",\
"X_AVG_DP",\
"X_NORM_DP",\
"Y_AVG_DP",\
"Y_NORM_DP",\
"COUNT_DISC_HOM",\
"COUNT_CONC_HOM",\
"PERCENT_CONC_HOM",\
"COUNT_DISC_HET",\
"COUNT_CONC_HET",\
"PERCENT_CONC_HET",\
"PERCENT_TOTAL_CONC",\
"COUNT_HET_BEADCHIP",\
"SENSITIVITY_2_HET",\
"SNP_ARRAY",\
"VERIFYBAM_FREEMIX",\
"VERIFYBAM_#SNPS",\
"VERIFYBAM_FREELK1",\
"VERIFYBAM_FREELK0",\
"VERIFYBAM_DIFF_LK0_LK1",\
"VERIFYBAM_AVG_DP",\
"MEDIAN_INSERT_SIZE",\
"MEAN_INSERT_SIZE",\
"STANDARD_DEVIATION_INSERT_SIZE",\
"MAD_INSERT_SIZE",\
"PCT_PF_READS_ALIGNED_R1",\
"PF_HQ_ALIGNED_READS_R1",\
"PF_MISMATCH_RATE_R1",\
"PF_HQ_ERROR_RATE_R1",\
"PF_INDEL_RATE_R1",\
"PCT_READS_ALIGNED_IN_PAIRS_R1",\
"PCT_ADAPTER_R1",\
"PCT_PF_READS_ALIGNED_R2",\
"PF_HQ_ALIGNED_READS_R2",\
"PF_MISMATCH_RATE_R2",\
"PF_HQ_ERROR_RATE_R2",\
"PF_INDEL_RATE_R2",\
"PCT_READS_ALIGNED_IN_PAIRS_R2",\
"PCT_ADAPTER_R2",\
"TOTAL_READS",\
"RAW_GIGS",\
"PCT_PF_READS_ALIGNED_PAIR",\
"PF_MISMATCH_RATE_PAIR",\
"PF_HQ_ERROR_RATE_PAIR",\
"PF_INDEL_RATE_PAIR",\
"PCT_READS_ALIGNED_IN_PAIRS_PAIR",\
"STRAND_BALANCE_PAIR",\
"PCT_CHIMERAS_PAIR",\
"PF_HQ_ALIGNED_Q20_BASES_PAIR",\
"MEAN_READ_LENGTH",\
"PCT_PF_READS_IMPROPER_PAIRS_PAIR",\
"UNMAPPED_READS",\
"READ_PAIR_OPTICAL_DUPLICATES",\
"PERCENT_DUPLICATION",\
"ESTIMATED_LIBRARY_SIZE",\
"SECONDARY_OR_SUPPLEMENTARY_READS",\
"GENOME_SIZE",\
"BAIT_TERRITORY",\
"TARGET_TERRITORY",\
"PCT_PF_UQ_READS_ALIGNED",\
"PF_UQ_GIGS_ALIGNED",\
"PCT_SELECTED_BASES",\
"ON_BAIT_VS_SELECTED",\
"MEAN_BAIT_COVERAGE",\
"MEAN_TARGET_COVERAGE",\
"MEDIAN_TARGET_COVERAGE",\
"MAX_TARGET_COVERAGE",\
"ZERO_CVG_TARGETS_PCT",\
"PCT_EXC_MAPQ",\
"PCT_EXC_BASEQ",\
"PCT_EXC_OVERLAP",\
"PCT_EXC_OFF_TARGET",\
"PCT_TARGET_BASES_1X",\
"PCT_TARGET_BASES_2X",\
"PCT_TARGET_BASES_10X",\
"PCT_TARGET_BASES_20X",\
"PCT_TARGET_BASES_30X",\
"PCT_TARGET_BASES_40X",\
"PCT_TARGET_BASES_50X",\
"PCT_TARGET_BASES_100X",\
"HS_LIBRARY_SIZE",\
"AT_DROPOUT",\
"GC_DROPOUT",\
"HET_SNP_SENSITIVITY",\
"HET_SNP_Q",\
"BAIT_SET",\
"PCT_USABLE_BASES_ON_BAIT",\
"Cref_Q",\
"Gref_Q",\
"DEAMINATION_Q",\
"OxoG_Q",\
"COUNT_SNV_ON_BAIT",\
"PERCENT_SNV_ON_BAIT_SNP138",\
"COUNT_SNV_ON_TARGET",\
"PERCENT_SNV_ON_TARGET_SNP138",\
"ALL_TI_TV_COUNT",\
"ALL_TI_TV_RATIO",\
"KNOWN_TI_TV_COUNT",\
"KNOWN_TI_TV_RATIO",\
"NOVEL_TI_TV_COUNT",\
"NOVEL_TI_TV_RATIO",\
"COUNT_ALL_INDEL_BAIT",\
"ALL_INDEL_BAIT_PCT_SNP138",\
"COUNT_BIALLELIC_INDEL_BAIT",\
"BIALLELIC_INDEL_BAIT_PCT_SNP138",\
"COUNT_ALL_INDEL_TARGET",\
"ALL_INDEL_TARGET_PCT_SNP138",\
"COUNT_BIALLELIC_INDEL_TARGET",\
"BIALLELIC_INDEL_TARGET_PCT_SNP138",\
"COUNT_MIXED_ON_BAIT",\
"PERCENT_MIXED_ON_BAIT_SNP138",\
"COUNT_MIXED_ON_TARGET",\
"PERCENT_MIXED_ON_TARGET_SNP138"} \
{print $0}' \
| sed 's/ /,/g' \
| sed 's/\t/,/g' \
>| $CORE_PATH/$PROJECT/REPORTS/QC_REPORTS/$PROJECT".QC_REPORT."$TIMESTAMP".csv"

# Concatenate all aneuploidy reports together

( cat $CORE_PATH/$PROJECT/REPORTS/ANEUPLOIDY_CHECK/*.chrom_count_report.txt | grep "^SM_TAG" | uniq ; \
cat $CORE_PATH/$PROJECT/REPORTS/ANEUPLOIDY_CHECK/*.chrom_count_report.txt | grep -v "SM_TAG" ) \
| sed 's/\t/,/g' \
>| $CORE_PATH/$PROJECT/REPORTS/QC_REPORTS/$PROJECT".ANEUPLOIDY_CHECK."$TIMESTAMP".csv"

# Concatenate all per chromosome verifybamID reports together
# TO DO CONCATENATE WITH THE CONTROLS...

( cat $CORE_PATH/$PROJECT/REPORTS/VERIFYBAMID_CHR/*.VERIFYBAMID.PER_CHR.txt | grep "^#" | uniq ; \
cat $CORE_PATH/$PROJECT/REPORTS/VERIFYBAMID_CHR/*.VERIFYBAMID.PER_CHR.txt | grep -v "^#" ) \
| sed 's/\t/,/g' \
>| $CORE_PATH/$PROJECT/REPORTS/QC_REPORTS/$PROJECT".PER_CHR_VERIFYBAMID."$TIMESTAMP".csv"

# Summarize Wall Clock times

sed 's/,/\t/g' $CORE_PATH/$PROJECT/REPORTS/$PROJECT".WALL.CLOCK.TIMES.csv" \
| sort -k 1,1 -k 2,2 -k 3,3 \
| awk 'BEGIN {OFS="\t"} {print $0,($6-$5),($6-$5)/60,($6-$5)/3600}' \
| $DATAMASH/datamash -s -g 1,2 max 7 max 8 max 9 | tee $CORE_PATH/$PROJECT/TEMP/WALL.CLOCK.TIMES.BY.GROUP.txt \
| $DATAMASH/datamash -g 1 sum 3 sum 4 sum 5 \
| awk 'BEGIN {print "SAMPLE_PROJECT","WALL_CLOCK_SECONDS","WALL_CLOCK_MINUTES","WALL_CLOCK_HOURS"} {print $0}' \
| sed -r 's/[[:space:]]+/,/g' \
>| $CORE_PATH/$PROJECT/REPORTS/$PROJECT".WALL.CLOCK.TIMES.BY_SAMPLE.csv"

sed 's/\t/,/g' $CORE_PATH/$PROJECT/TEMP/WALL.CLOCK.TIMES.BY.GROUP.txt \
| awk 'BEGIN {print "SAMPLE_PROJECT","TASK_GROUP","WALL_CLOCK_SECONDS","WALL_CLOCK_MINUTES","WALL_CLOCK_HOURS"} {print $0}' \
| sed -r 's/[[:space:]]+/,/g' \
>| $CORE_PATH/$PROJECT/REPORTS/$PROJECT".WALL.CLOCK.TIMES.BY_SAMPLE_GROUP.csv"

echo Project finished at `date` >> $CORE_PATH/$PROJECT/REPORTS/PROJECT_START_END_TIMESTAMP.txt

# todo: oxidation report?
